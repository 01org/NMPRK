Using the NMPRK Library in Linux

This document describes in detail how to build, test, integrate and use Intel(r) Node Manager Programmer's Reference Kit. There are two different ways one can use the kit.  Building an application using the existing per-built release libraries or build the libraries from the sources.  

H/W requirements -
	Host machine to compile sources
	Intel(r) Server Platform with Intel(r) Node Manager Technology 
S/W requirements -
	Microsoft(r) Visual Studio(r) 
	Linux - Red Hat(r), Ubuntu(r), SLES


Test setup -
Host computer to compile and run Intel(r) Node Manager Programmer's reference kit
					|
					|	Connected using Management LAN
					|
					|
Intel(r) Server with Intel(r) Node Manager Technology



Using the nmprk library in Linux is very easy.  You only need to install the library to your system and then start including the headers in your code and link against the library during compilation.  The point of this document is to walk you through these steps.  (Note: Two examples of interfacing to the library come with the NMPRK package. They are the test programs testIpmi.cpp and testTranslation.cpp)

Building and installing the library:
1.  Place the compressed release package on your system and extract it (this document assumes it is located in /root/released).

2.  To extract the package run the following command
    #unzip nmprk-<version>.zip

3.  Now we will build the ipmi engine part of the library.  First change directory to <project source> and run the following commands: 
	#chmod +x build.sh
	#./build.sh

4.  If you see no error output, then it built correctly and you need to install the libraries and headers to the system. 
    You can do this by running the following command.
	#./install.sh
    Which creates the following folders:
      /usr/local/include/nmprk
      /usr/local/include/nmprk/ipmi
      /usr/local/include/nmprk/translation
    and copies the header folders and files to:
      /usr/local/include/nmprk/ipmi/
      /usr/local/include/nmprk/translation/
    and fixes two lines in the file:
      /usr/local/include/nmprk/translation/nmprk_translation.h
    from #include "../../ipmi/include/nmprk_ipmi.h" to #include "../ipmi/nmprk_ipmi.h"
    from #include "../../ipmi/include/nmprk_defines.h" to #include "../ipmi/nmprk_defines.h"
    and will install the libraries on the system to:
	ipmi/bin/libNmprkIpmi.a /usr/local/lib/
	translation/bin/libNmprkTranslation.a /usr/local/lib
5. We are now all built and installed!


Using the nmprk library:
1.  Now we will go through the steps to use the library in one of your projects.  Start by creating a folder for this new project (we will call it usingNmprkLib)
	#cd ~
	#mkdir usingNmprkLib
2.  Now we create the actual source file (usingNmprkLib.cpp) which is where most of the remaining steps will take place.
3.  We will start off by including the header files that will be needed for this project:
    #include <iostream>
    #include <nmprk/ipmi/nmprk_ipmi.h>
    #include <nmprk/ipmi/nmprk_exception.h>
    #include <nmprk/ipmi/nmprk_defines.h>
    #include <nmprk/ipmi/nmprk_ipmi_global.h>
    #include <nmprk/translation/nmprk_translation.h>
    #include <nmprk/translation/nmprk_translation_defines.h>
4.  Now we can get down the writing the actual code inside the function.  First we need to start off by declaring our variables to hold our device information.  Then we need to set what type of device we are using (Node Manager in this case) and what type of connection this is (local/KCS or OOB/lan).  We can do this with the following three lines of code:
	
	nmprk::ipmi::device d;
	d.type = nmprk::ipmi::device_nm;
	d.address = "local";

5.  We are now ready to start calling our functions.  Before we start doing the actual work we first need to initialize the library and the device.  We do this with the following lines:
	
	INIT THE LIBRARY:
	bool result;
    try {
      result = nmprk::translation::swSubSystemSetup(nmprk::translation::initLibrary,NULL);
	}catch(nmprk::nmprkException* e) {
	  std::cout << "Failed!\nCaught Exception swSubSystemSetup(library): Code[" << e->errorCode << "] MSG[" << e->errorMsg << "]\n";
      return -1;
    }
    if(!result) {
	  std::cout << "Library init failed!\n";
	  return -1;
    }else std::cout << "Library initalized!\n";
	
	INIT THE DEVICE:
	try {
      result = nmprk::translation::swSubSystemSetup(nmprk::translation::initDevice,&d);
	}catch(nmprk::nmprkException* e) {
      std::cout << "Failed!\nCaught Exception swSubSystemSetup(device): Code[" << e->errorCode << "] MSG[" << e->errorMsg << "]\n";
      return -1;
    }
    if(!result) {
      std::cout << "Device init failed!\n";
      return -1;
    }else std::cout << "Device initalized!\n";
	
6.  With everything initialized we are now ready to start calling our functions.  First we will call nmprk::ipmi:: getDeviceId and display the resulting info that is returned.  We do this like so:

	nmprk::translation::capabilities_t* cap;
    try {
      cap = nmprk::translation::getCapabilities(&d);
    }catch(nmprk::nmprkException* e) {
      std::cout << "Failed!\nCaught Exception getCapabilities(device): Code[" << e->errorCode << "] MSG[" << e->errorMsg << "]\n";
      return -1;
    } 
    if(cap != NULL) {  
      std::cout << "Device Capabilities:\n";
      std::cout << "\tMax Concurent Connections: " << cap->maxConSettings << std::endl;
      std::cout << "\tMax Trigger Value (for policies): " << cap->maxTriggerValue << std::endl;
      std::cout << "\tMin Trigger Value (for policies): " << cap->minTriggerValue << std::endl;
      std::cout << "\tMax Correction Time (for policies): " << cap->maxCorrectionTime << std::endl;
      std::cout << "\tMin Correction Time (for policies): " << cap->minCorrectionTime << std::endl;
      std::cout << "\tMax Statistics Reporting Period: " << cap->maxStatReportPeriod << std::endl;
      std::cout << "\tMin Statistics Reporting Period: " << cap->minStatReportPeriod << std::endl; 
    }
	
7.  Now let's get our power reading:

	nmprk::translation::sample_t* sample;
	try {
	  sample = nmprk::translation::getSample(&d,nmprk::translation::samplePower,nmprk::translation::domainSystem,NULL);
	}catch(nmprk::nmprkException* e) {
      std::cout << "Failed!\nCaught Exception getSample(power): Code[" << e->errorCode << "] MSG[" << e->errorMsg << "]\n";
      return -1;
    }
	if(sample != NULL) {
      std::cout << "Power Reading:\n";
	  std::cout << "\tCurrent Power Reading (Watts): " << sample->cur << std::endl;
	  std::cout << "\tMin Power Reading (Watts): " << sample->min << std::endl;
	  std::cout << "\tMax Power Reading (Watts): " << sample->max << std::endl;
      std::cout << "\tAverage Power Reading (Watts): " << sample->avg << std::endl;
      std::cout << "\tReading Time Stamp: " << asctime(&sample->timestamp) << std::endl;
      std::cout << "\tReporting Period (seconds): " << sample->statReportingPeriod << std::endl;
    }else{
   	  std::cout << "Unable to sample power reading!\n";
	  return -1;
    }
	
8.  Which just leaves us with setting a 10% power cap:

	nmprk::translation::policy_t policy;
	policy.policyId = 0x02; 
	policy.policyEnabled = true;
	policy.policyType = nmprk::translation::policyPower;  // power limit, not thermal limit
	policy.component = nmprk::translation::domainSystem;  // set a limit for the whole system
	policy.sendAlert = true;          // send alert if policy.policyLimit is breached for longer then policy.correctionTime
	policy.shutdown = false;          // shutdown system if policy.policyLimit is breached for longer then policy.correctionTime
	policy.statReportingPeriod = 10;  // how long values are averaged over
	policy.correctionTime = 10;       // how long a policy can be over its limit 
                                    // before policy.sendAlert and policy.shutdown are performed if true
	policy.policyLimit = (sample->avg - (sample->avg * .10));
  
	try {
      result = nmprk::translation::setPolicy(&d,&policy);
	}catch(nmprk::nmprkException* e) {
      std::cout << "Failed!\nCaught Exception setPolicy(0x01): Code[" << e->errorCode << "] MSG[" << e->errorMsg << "]\n";
      return -1;
    }
	if(!result) {
	  std::cout << "Unable to set power cap!\n";
	  return -1;
    }else std::cout << "Power cap set to " << policy.policyLimit << " Watts!\n";
	
9. As a final step we just need to uninit the library and device:

	try {
	  nmprk::translation::swSubSystemSetup(nmprk::translation::unInitDevice,&d);
	  nmprk::translation::swSubSystemSetup(nmprk::translation::unInitLibrary,NULL);
	}catch(nmprk::nmprkException* e) {
	  std::cout << "Failed!\nCaught Exception uninitalizing everything: Code[" << e->errorCode << "] MSG[" << e->errorMsg << "]\n";
      return -1;
	}
	
10. We are now ready to compile our application (Full source code listing below).  To compile it run the following command
	#g++ -o usingNmprkLib usingNmprkLib.cpp -L/usr/local/lib -lNmprkTranslation -lNmprkIpmi

11. You have now created your first application using the nmprk library

Full source code listing:
// usingNmprkExample.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>


#include <nmprk_ipmi.h>
#include <nmprk_exception.h>
#include <nmprk_defines.h>
#include <nmprk_ipmi_global.h>
#include <nmprk_translation.h>
#include <nmprk_translation_defines.h>

int _tmain(int argc, _TCHAR* argv[])
{
  nmprk::ipmi::device d;
  d.type = nmprk::ipmi::device_nm;
  d.address = "local";

  
  bool result;
  try {
    result = nmprk::translation::swSubSystemSetup(nmprk::translation::initLibrary,NULL);
  }catch(nmprk::nmprkException* e) {
   std::cout << "Failed!\nCaught Exception swSubSystemSetup(library): Code[" << e->errorCode << "] MSG[" << e->errorMsg << "]\n";
   return -1;
  }
  if(!result) {
	std::cout << "Library init failed!\n";
	return -1;
  }else std::cout << "Library initalized!\n";
  
  try {
    result = nmprk::translation::swSubSystemSetup(nmprk::translation::initDevice,&d);
  }catch(nmprk::nmprkException* e) {
   std::cout << "Failed!\nCaught Exception swSubSystemSetup(device): Code[" << e->errorCode << "] MSG[" << e->errorMsg << "]\n";
   return -1;
  }
  if(!result) {
	std::cout << "Device init failed!\n";
	return -1;
  }else std::cout << "Device initalized!\n";

  nmprk::translation::capabilities_t* cap;
  try {
    cap = nmprk::translation::getCapabilities(&d);
  }catch(nmprk::nmprkException* e) {
   std::cout << "Failed!\nCaught Exception getCapabilities(device): Code[" << e->errorCode << "] MSG[" << e->errorMsg << "]\n";
   return -1;
  } 
  if(cap != NULL) {  
   std::cout << "Device Capabilities:\n";
    std::cout << "\tMax Concurent Connections: " << cap->maxConSettings << std::endl;
    std::cout << "\tMax Trigger Value (for policies): " << cap->maxTriggerValue << std::endl;
    std::cout << "\tMin Trigger Value (for policies): " << cap->minTriggerValue << std::endl;
    std::cout << "\tMax Correction Time (for policies): " << cap->maxCorrectionTime << std::endl;
    std::cout << "\tMin Correction Time (for policies): " << cap->minCorrectionTime << std::endl;
    std::cout << "\tMax Statistics Reporting Period: " << cap->maxStatReportPeriod << std::endl;
    std::cout << "\tMin Statistics Reporting Period: " << cap->minStatReportPeriod << std::endl; 
  }
	
  nmprk::translation::sample_t* sample;
  try {
   sample = nmprk::translation::getSample(&d,nmprk::translation::samplePower,nmprk::translation::domainSystem,NULL);
  }catch(nmprk::nmprkException* e) {
   std::cout << "Failed!\nCaught Exception getSample(power): Code[" << e->errorCode << "] MSG[" << e->errorMsg << "]\n";
   return -1;
  }
  if(sample != NULL) {
   std::cout << "Power Reading:\n";
   std::cout << "\tCurrent Power Reading (Watts): " << sample->cur << std::endl;
   std::cout << "\tMin Power Reading (Watts): " << sample->min << std::endl;
   std::cout << "\tMax Power Reading (Watts): " << sample->max << std::endl;
   std::cout << "\tAverage Power Reading (Watts): " << sample->avg << std::endl;
   std::cout << "\tReading Time Stamp: " << asctime(&sample->timestamp) << std::endl;
   std::cout << "\tReporting Period (seconds): " << sample->statReportingPeriod << std::endl;
  }else{
	std::cout << "Unable to sample power reading!\n";
	return -1;
  }

  nmprk::translation::policy_t policy;
  policy.policyId = 0x02; 
  policy.policyEnabled = true;
  policy.policyType = nmprk::translation::policyPower;  // power limit, not thermal limit
  policy.component = nmprk::translation::domainSystem;  // set a limit for the whole system
  policy.sendAlert = true;          // send alert if policy.policyLimit is breached for longer then policy.correctionTime
  policy.shutdown = false;          // shutdown system if policy.policyLimit is breached for longer then policy.correctionTime
  policy.statReportingPeriod = 10;  // how long values are averaged over
  policy.correctionTime = 10;       // how long a policy can be over its limit 
                                    // before policy.sendAlert and policy.shutdown are performed if true
  policy.policyLimit = (sample->avg - (sample->avg * .10));
  
  try {
    result = nmprk::translation::setPolicy(&d,&policy);
  }catch(nmprk::nmprkException* e) {
    std::cout << "Failed!\nCaught Exception setPolicy(0x01): Code[" << e->errorCode << "] MSG[" << e->errorMsg << "]\n";
    return -1;
  }
  if(!result) {
	std::cout << "Unable to set power cap!\n";
	return -1;
  }else std::cout << "Power cap set to " << policy.policyLimit << " Watts!\n";
 
  try {
	  nmprk::translation::swSubSystemSetup(nmprk::translation::unInitDevice,&d);
	  nmprk::translation::swSubSystemSetup(nmprk::translation::unInitLibrary,NULL);
  }catch(nmprk::nmprkException* e) {
	std::cout << "Failed!\nCaught Exception uninitalizing everything: Code[" << e->errorCode << "] MSG[" << e->errorMsg << "]\n";
    return -1;
  }

 return 0;
}



